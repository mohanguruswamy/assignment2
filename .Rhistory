load("./data/samsungData.rda")
# the names of samsungData contain invalid characters, clean them up
names(samsungData) <- make.names(names(samsungData), unique=TRUE)
# convert subject and activity to factors
samsungData$subject <- as.factor(samsungData$subject)
samsungData$activity <- as.factor(samsungData$activity)
# We have 21 subjects, so to divide the data into 3 (train, validate, test) they can have 7 each
# create training set (must include the data from subjects 1, 3, 5, and 6)
ssdTrain <- subset(samsungData, subject %in% c(1,3,5,6,7,8,11))
# create a validation set
ssdVal <- subset(samsungData, subject %in% c(14,15,16,17,19,21,22))
# create test set (must be from at least subjects 27, 28, 29, and 30)
ssdTestDONOTUSE <- subset(samsungData, subject %in% c(23,25,26,27,28,29,30))
nrow(ssdTestDONOTUSE) + nrows(ssdTrain) + nrows(ssdVal)
nrow(ssdTestDONOTUSE) + nrow(ssdTrain) + nrow(ssdVal)
library(tree)
tree1 <- tree(activity ~ .,data=ssdTrain)
summary(tree1)
plot(ssdTrain$fBodyAccJerk.std...X, ssdTrain$activity)
plot(ssdTrain$tBodyAccJerk.max...X, ssdTrain$activity)
plot(tree1)
text(tree1)
?text
plot(tree1)
text(tree1, use.n=TRUE, all=TRUE, cex=.8)
text(tree1, all=TRUE, cex=.8)
plot(tree1)
text(tree1, all=TRUE, cex=.8)
library(rpart)
tree.rp <- rpart(activity ~ ., data=ssdTrain)
summary(rpart)
summary(tree.rp)
plot(tree.rp, title="rpart initial tree")
plot(tree.rp, main="rpart initial tree")
text(tree.rp, all=TRUE, cex=.8)
plot(tree1, main="initial tree (tree lib)")
text(tree1, all=TRUE, cex=.8)
plot(tree1, main="initial tree (tree lib)")
plot(tree1, main="initial tree (tree lib)", title="lk")
plot(tree1, main="initial tree (tree lib)")
title("initial")
title("initial tree (tree library)")
plot(tree1)  # for some reason the 'main' argument doesn't work
title("initial tree (tree library)")
text(tree1, all=TRUE, cex=.8)
plot(tree.rp, main="initial tree (rpart library)")
text(tree.rp, all=TRUE, cex=.8)
plot(tree.rp, main="initial tree (rpart library)")
text(tree.rp, cex=.8)
plot(tree1)  # for some reason the 'main' argument doesn't work
title("initial tree (tree library)")
text(tree1, cex=.8)
plot(tree.rp, main="initial tree (rpart library)")
text(tree.rp, cex=.8)
par(mar=c(0.5,0.5,0.5,0.5))
plot(tree.rp, main="initial tree (rpart library)")
text(tree.rp, cex=.8)
par(mar=c(2,0.5,0.5,1))
plot(tree.rp, main="initial tree (rpart library)")
text(tree.rp, cex=.8)
plotcp(tree.rp)
pfit<- prune(tree.rp, cp=tree.rp$cptable[which.min(tree.rp$cptable[,"xerror"]),"CP"])
plot(pfit, main="pruned rpart tree")
text(tree.rp, cex=.8)
text(pfit, cex=.8)
plot(pfit, main="pruned rpart tree")
text(pfit, cex=.8)
plot(pfit, main="pruned rpart tree")
text(pfit, cex=.8)
library(randomForest)
rf <- randomForest(activity ~ ., data=ssdTrain)
summary(rf)
plot(rf)
print(rf)
importance(rf)
?rbind
ssdTrainVal <- rbind(ssdTrain, ssdVal)
2474+2220
ssdTrainVal2 <- subset(rfTrainVal, select = -subject)
ssdTrainVal2 <- subset(rfTrainVal, select = -rfTrainVal$subject)
ssdTrainVal2 <- ssdTrainVal[, !(colnames(ssdTrainVal) %in% c("subject"))]
ssdTrainVal <- ssdTrainVal[, !(colnames(ssdTrainVal) %in% c("subject"))]
rm(ssdTrainVal2)
rf.trainVal <- randomForest(activity ~ ., data=ssdTrainVal)
print(rf.trainVal)
ssdTrainVal <- rbind(ssdTrain, ssdVal)
dim(samsungData)
unique(samsungData$subject)
length(unique(samsungData$subject))
plot(samsungData[,1])
length(samsungData[,1:561] > 1)
sum(samsungData[,1:561] > 1)
sum(samsungData[,1:561] < 1)
sum(samsungData[,1:561] < -1)
ssdTrainVal <- rbind(ssdTrain, ssdVal)
rf.trainVal <- randomForest(activity ~ ., data=ssdTrainVal)
library(randomForest)
ssdTrainVal <- rbind(ssdTrain, ssdVal)
rf.trainVal <- randomForest(activity ~ ., data=ssdTrainVal)
print(rf.trainVal)
plot(samsungdata[,1:100])
plot(samsungData[,1:100])
for i in 2:100{
points(samsungData[,i])
}
for (i in 2:100) {
points(samsungData[,i])
}
plot(samsungData[,1])
for (i in 2:100) {
points(samsungData[,i])
}
plot(samsungData[,1])
for (i in 2:10) {
points(samsungData[,i], cex=0.1, col="red")
}
svd1 = svd(scale(samsungData[samsungData$subject==1,-c(562,563)]))
par(mfrow=c(1,2))
plot(svd1$u[,1],col=numericActivity,pch=19)
plot(svd1$u[,2],col=numericActivity,pch=19)
plot(svd1$u[,1],col=activity,pch=19)
plot(svd1$u[,1],pch=19)
numericActivity <- as.numeric(as.factor(samsungData$activity))[samsungData$subject==1]
plot(svd1$u[,1],col=numericActivity,pch=19)
plot(svd1$u[,2],col=numericActivity,pch=19)
plot(svd1$v[,2],pch=19)
?svd
diag(svd1)
summary(svd1)
?load
plot(tree1)  # for some reason the 'main' argument doesn't work
tree1 <- tree(activity ~ .,data=ssdTrain)
library(tree)
tree1 <- tree(activity ~ .,data=ssdTrain)
summary(tree1)
plot(tree1)  # for some reason the 'main' argument doesn't work
par(mfrow=c(1,1))
plot(tree1)  # for some reason the 'main' argument doesn't work
title("initial tree (tree library)")
text(tree1, cex=.8)
?tree
plot(tree1)  # for some reason the 'main' argument doesn't work
title("tree(activity ~ .,data=ssdTrain)")
text(tree1, cex=.8)
tree1$y
tree1$terms
summary(tree1)
tree1$weights
tree1$frame
tree1$frame$var
unique(tree1$frame$var)
important.vars <- unique(tree1$frame$var)
fix(important.vars)
unique(tree1$frame$var)
print(important.vars)
summary(tree1)
important.vars <- tree1$frame$var
important.vars <- as.character(tree1$frame$var)
fix(important.vars)
imp.vars <- subset(important.vars, var != "leaf")
imp.vars <- subset(important.vars, != "leaf")
fix(important.vars)
imp.vars <- important.vars[important.vars!="<leaf>"]
fix(imp.vars)
important.vars <- important.vars[important.vars!="<leaf>"]
rm(imp.vars)
print(important.vars)
?randomForest
library(randomForest)
?randomForest
summary(tree1)
tree.pred1 <- predict(tree1, ssdVal, type="class")
summary(tree.pred1)
tree.pred1
tree.pred1 != ssdVal$activity
misclass <- sum(tree.pred1 != ssdVal$activity)
misclass.rate <- misclass / length(ssdVal$activity)
length(ssdVal$activity)
summary(tree.pred1)
summary(tree1)  # use this to view the misclassification rate
length(ssdVal$activity)
misclass.rate <- misclass / length(ssdVal$activity)
print(rf.trainVal)
rf.pred1 <- predict(rf.trainVal, ssdTestDONOTUSE, type="class")
summary(rf.pred1)
rf.pred1
rf.misclass <- sum(rf.pred1 != ssdTestDONOTUSE$activity)
rf.misclass.rate <- rf.misclass / length(ssdTestDONOTUSE$activity)
rf.misclass.rate <- rf.misclass / length(ssdTestDONOTUSE$activity) *100
print(rf.pred1)
print(rf.trainVal)
plotcp(tree1)
plot(tree1, uniform=TRUE, cex=0.8)
text(tree1, cex=0.8)
plot(tree1)
text(tree1, cex=0.8)
text(tree1, cex=0.8, pretty=TRUE)
plot(tree1)
title("Classification tree for activity, using all other variables")
text(tree1, cex=0.8, pretty=TRUE)
plot(tree1)
title(main="Classification tree for activity, using all other variables"
sub="call: tree(activity ~ .,data=ssdTrain)")
title(main="Classification tree for activity, using all other variables",
sub="call: tree(activity ~ .,data=ssdTrain)")
text(tree1, cex=0.8)
plot(tree1)
title(main="Classification tree for activity, using all other variables",
sub="call: tree(activity ~ .,data=ssdTrain)")
text(tree1, cex=0.8)
?tree
